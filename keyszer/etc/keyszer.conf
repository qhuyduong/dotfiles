# define timeout for multipurpose_modmap
timeouts(
    multipurpose = 1,
    suspend = 1,
)

# Use the following for testing terminal keymaps
# xbindkeys -mk
terminals = [
    "alacritty",
    "hyper",
]
terminals = [term.casefold() for term in terminals]
termStr = "|".join(str('^'+x+'$') for x in terminals)

mscodes = ["code","vscodium"]
codeStr = "|".join(str('^'+x+'$') for x in mscodes)

# Add remote desktop clients & VM software here
# Ideally we'd only exclude the client window,
# but that may not be easily done.
remotes = [
    "Virt-manager",
]
remotes = [client.casefold() for client in remotes]
remotesStr = "|".join(str('^'+x+'$') for x in remotes)

# Add remote desktop clients & VMs for no remapping
terminals.extend(remotes)
mscodes.extend(remotes)

# Use for browser specific hotkeys
browsers = [
    "Brave-browser",
    "Firefox",
    "Google-chrome",
]
browsers = [browser.casefold() for browser in browsers]
browserStr = "|".join(str('^'+x+'$') for x in browsers)

chromes = [
    "Brave-browser",
    "Google-chrome",
]
chromes = [chrome.casefold() for chrome in chromes]
chromeStr = "|".join(str('^'+x+'$') for x in chromes)

filemanagers = [
    "org.gnome.nautilus",
]
filemanagers = [filemanager.casefold() for filemanager in filemanagers]
filemanagerStr = "|".join(str('^'+x+'$') for x in filemanagers)

# [Global modmap] Change modifier keys as in xmodmap
define_conditional_modmap(lambda wm_class: wm_class.casefold() not in terminals,{
    # - Mac Only
    Key.LEFT_META: Key.RIGHT_CTRL,  # Mac
    Key.LEFT_CTRL: Key.LEFT_META,   # Mac
    Key.RIGHT_META: Key.RIGHT_CTRL, # Mac - Multi-language (Remove)
    Key.RIGHT_CTRL: Key.RIGHT_META, # Mac - Multi-language (Remove)
})

# [Conditional modmap] Change modifier keys in certain applications
define_conditional_modmap(re.compile(termStr, re.IGNORECASE), {
    # - Mac Only
    Key.LEFT_META: Key.RIGHT_CTRL,  # Mac
    # # Left Ctrl Stays Left Ctrl
    Key.RIGHT_META: Key.RIGHT_CTRL, # Mac - Multi-language (Remove)
    Key.RIGHT_CTRL: Key.LEFT_CTRL,  # Mac - Multi-language (Remove)
})

# None referenced here originally
# - but remote clients and VM software ought to be set here
# These are the typical remaps for ALL GUI based apps
define_keymap(lambda wm_class: wm_class.casefold() not in remotes,{
    K("RC-Shift-Left_Brace"):   K("C-Page_Up"),         # Tab nav: Go to prior (left) tab
    K("RC-Shift-Right_Brace"):  K("C-Page_Down"),       # Tab nav: Go to next (right) tab
    K("RC-Space"): K("Super-Slash"),                   # Default SL - Launch Application Menu (gnome/kde)
    K("RC-Q"): K("Alt-F4"),                         # Default SL - not-popos
    K("Alt-Tab"): ignore_key,                 # Default - Cmd Tab - App Switching Default
    K("RC-Tab"): [bind, K("Alt-Tab")],                      # Default - Cmd Tab - App Switching Default
    K("RC-Shift-Tab"): [bind, K("Alt-Shift-Tab")],          # Default - Cmd Tab - App Switching Default
    K("RC-Grave"): [bind, K("Alt-Grave")],                  # Default not-xfce4 - Cmd ` - Same App Switching
    K("RC-Shift-Grave"): [bind, K("Alt-Shift-Grave")],      # Default not-xfce4 - Cmd ` - Same App Switching
    K("Super-Tab"): K("LC-Tab"),                  # Default not-chromebook
    K("Super-Shift-Tab"): K("LC-Shift-Tab"),      # Default not-chromebook

    # emacs style
    K("Super-a"): K("Home"),                      # Beginning of Line
    K("Super-e"): K("End"),                       # End of Line
    K("Super-b"): K("Left"),
    K("Super-f"): K("Right"),
    K("Super-n"): K("Down"),
    K("Super-p"): K("Up"),

    # Wordwise
    K("RC-Left"): K("Home"),                      # Beginning of Line
    K("RC-Shift-Left"): K("Shift-Home"),          # Select all to Beginning of Line
    K("RC-Right"): K("End"),                      # End of Line
    K("RC-Shift-Right"): K("Shift-End"),          # Select all to End of Line
    K("RC-Up"): K("C-Home"),                      # Beginning of File
    K("RC-Shift-Up"): K("C-Shift-Home"),          # Select all to Beginning of File
    K("RC-Down"): K("C-End"),                     # End of File
    K("RC-Shift-Down"): K("C-Shift-End"),         # Select all to End of File
    K("Super-Backspace"): K("C-Backspace"),       # Delete Left Word of Cursor
    K("Super-Delete"): K("C-Delete"),             # Delete Right Word of Cursor
    K("Alt-Backspace"): K("C-Backspace"),           # Default not-chromebook
    K("RC-Backspace"): K("C-Shift-Backspace"),    # Delete Entire Line Left of Cursor
    K("Alt-Delete"): K("C-Delete"),               # Delete Right Word of Cursor

    # PopOS
    K("RC-e"): K("Super-o"), # Change window orientation
    K("RC-g"): K("Super-g"), # Toggle floating mode
    K("RC-i"): K("Super-s"), # Toggle stacking mode
    K("RC-m"): K("Super-m"), # Toggle maximize
}, "General GUI")

# Keybindings for general Linux file managers group:
define_keymap(re.compile(filemanagerStr, re.IGNORECASE),{
    K("RC-i"):                  K("Alt-Enter"),       # File properties dialog (Get Info)
    K("RC-comma"):              [K("Alt-E"),K("N")],  # Open preferences dialog
    K("RC-Shift-dot"):          K("RC-H"),          # Show/hide hidden files ("dot" files)
    K("RC-Left_Brace"):         K("Alt-Left"),        # Go Back
    K("RC-Right_Brace"):        K("Alt-Right"),       # Go Forward
    K("RC-Left"):               K("Alt-Left"),        # Go Back
    K("RC-Right"):              K("Alt-Right"),       # Go Forward
    K("RC-Up"):                 K("Alt-Up"),          # Go Up dir
    K("RC-Down"):               K("Enter"),         # Go Down dir (open folder/file) [universal]
    K("RC-Shift-Left_Brace"):   K("C-Page_Up"),     # Go to prior tab
    K("RC-Shift-Right_Brace"):  K("C-Page_Down"),   # Go to next tab
    K("RC-Shift-Left"):         K("C-Page_Up"),     # Go to prior tab
    K("RC-Shift-Right"):        K("C-Page_Down"),   # Go to next tab
    K("RC-Super-o"):    K("RC-Shift-o"),        # Open in new window (or tab, depends on FM setup) [not universal]
    K("RC-Backspace"):  K("Delete"),	        # Move to Trash (delete)
},"General File Managers - Finder Mods")

# Keybindings overrides for Nautilus
define_keymap(re.compile("^org.gnome.nautilus$|^nautilus$", re.IGNORECASE),{
    K("RC-KEY_1"):      K("C-KEY_2"),           # View as Icons
    K("RC-KEY_2"):      K("C-KEY_1"),           # View as List (Detailed)
},"Overrides for Nautilus - Finder Mods")

# Open preferences in browsers
define_keymap(re.compile("^Firefox$", re.IGNORECASE),{
    K("C-comma"): [
        K("C-T"),K("a"),K("b"),K("o"),K("u"),K("t"),
        K("Shift-SEMICOLON"),K("p"),K("r"),K("e"),K("f"),
        K("e"),K("r"),K("e"),K("n"),K("c"),K("e"),K("s"),K("Enter")
    ],
    K("RC-Shift-N"):    K("RC-Shift-P"),        # Open private window with Ctrl+Shift+N like other browsers
})

define_keymap(re.compile(chromeStr, re.IGNORECASE),{
    K("C-comma"): [K("Alt-e"), K("s"),K("Enter")],    # Open preferences
    K("RC-q"):              K("Alt-F4"),              # Quit Chrome(s) browsers with Cmd+Q
    K("RC-Left_Brace"):     K("Alt-Left"),            # Page nav: Back to prior page in history
    K("RC-Right_Brace"):    K("Alt-Right"),           # Page nav: Forward to next page in history
}, "Chrome Browsers")
# Opera C-F12

# Keybindings for General Web Browsers
define_keymap(re.compile(browserStr, re.IGNORECASE),{
    K("RC-Q"): K("RC-Q"),           # Close all browsers Instances
    K("Alt-RC-I"): K("RC-Shift-I"),   # Dev tools
    K("Alt-RC-J"): K("RC-Shift-J"),   # Dev tools
    K("RC-Key_1"): K("Alt-Key_1"),    # Jump to Tab #1-#8
    K("RC-Key_2"): K("Alt-Key_2"),
    K("RC-Key_3"): K("Alt-Key_3"),
    K("RC-Key_4"): K("Alt-Key_4"),
    K("RC-Key_5"): K("Alt-Key_5"),
    K("RC-Key_6"): K("Alt-Key_6"),
    K("RC-Key_7"): K("Alt-Key_7"),
    K("RC-Key_8"): K("Alt-Key_8"),
    K("RC-Key_9"): K("Alt-Key_9"),    # Jump to last tab
    # Enable Cmd+Shift+Braces for tab navigation
    K("RC-Shift-Left_Brace"):   K("C-Page_Up"),     # Go to prior tab
    K("RC-Shift-Right_Brace"):  K("C-Page_Down"),   # Go to next tab
    # Enable Cmd+Option+Left/Right for tab navigation
    K("RC-Alt-Left"):             K("C-Page_Up"),     # Go to prior tab
    K("RC-Alt-Right"):            K("C-Page_Down"),   # Go to next tab
    # Enable Ctrl+PgUp/PgDn for tab navigation
    K("Super-Page_Up"):         K("C-Page_Up"),     # Go to prior tab
    K("Super-Page_Down"):       K("C-Page_Down"),   # Go to next tab
    # Use Cmd+Braces keys for tab navigation instead of page navigation 
    # K("C-Left_Brace"): K("C-Page_Up"),
    # K("C-Right_Brace"): K("C-Page_Down"),
}, "General Web Browsers")

# Note: terminals extends to remotes as well
define_keymap(lambda wm_class: wm_class.casefold() not in terminals,{
    K("RC-Dot"): K("Esc"),                        # Mimic macOS Cmd+dot = Escape key (not in terminals)
})

define_keymap(lambda wm_class: wm_class.casefold() not in mscodes,{
    # Wordwise remaining - for Everything but VS Code
    K("Alt-Left"): K("C-Left"),               # Left of Word
    K("Alt-Shift-Left"): K("C-Shift-Left"),   # Select Left of Word
    K("Alt-Right"): K("C-Right"),             # Right of Word
    K("Alt-Shift-Right"): K("C-Shift-Right"), # Select Right of Word
    K("Alt-Shift-g"): K("C-Shift-g"),         # View source control
}, "Wordwise - not vscode")

# Keybindings for VS Code
define_keymap(re.compile(codeStr, re.IGNORECASE),{
    K("Super-Space"): K("LC-Space"),                        # Basic code completion
    # Wordwise remaining - for VS Code
    # Alt-F19 hack fixes Alt menu activation
    K("Alt-Left"): [K("Alt-F19"),K("C-Left")],                  # Left of Word
    K("Alt-Right"): [K("Alt-F19"),K("C-Right")],                # Right of Word
    K("Alt-Shift-Left"): [K("Alt-F19"),K("C-Shift-Left")],      # Select Left of Word
    K("Alt-Shift-Right"): [K("Alt-F19"),K("C-Shift-Right")],    # Select Right of Word

    K("C-Alt-Left"):              K("C-PAGE_UP"),             # next_view
    K("C-Alt-Right"):             K("C-PAGE_DOWN"),           # prev_view
    K("RC-Shift-Left_Brace"):   K("C-PAGE_UP"),             # next_view
    K("RC-Shift-Right_Brace"):  K("C-PAGE_DOWN"),           # prev_view

    # VS Code Shortcuts
    K("C-g"): ignore_key,                 # cancel Go to Line...
    K("Super-g"): K("C-g"),                     # Go to Line...
    K("F3"): ignore_key,                  # cancel Find next
    K("C-h"): ignore_key,                 # cancel replace
    K("C-Alt-f"): K("C-h"),                       # replace
    K("C-Shift-h"): ignore_key,           # cancel replace_next
    K("C-Alt-e"): K("C-Shift-h"),                 # replace_next
    K("f3"): ignore_key,                  # cancel find_next
    K("C-g"): K("f3"),                          # find_next
    K("Shift-f3"): ignore_key,            # cancel find_prev
    K("C-Shift-g"): K("Shift-f3"),              # find_prev
    K("Super-c"): K("LC-c"),                    # Default - Terminal - Sigint
    K("Super-u"): K("LC-u"),                    # Vim
    K("Super-d"): K("LC-d"),                    # Vim
    K("Super-h"): K("LC-h"),                    # Vim
    K("Super-j"): K("LC-j"),                    # Vim
    K("Super-k"): K("LC-k"),                    # Vim
    K("Super-l"): K("LC-l"),                    # Vim
    K("Super-o"): K("LC-o"),                    # Vim
    K("Super-r"): K("LC-r"),                    # Vim
    K("Super-v"): K("LC-v"),                    # Vim
    K("Super-Grave"): K("LC-Grave"),            # Vim
    K("Super-Up"): K("LC-Up"),
    K("Super-Down"): K("LC-Down"),
}, "Code")

# Keybindings for IntelliJ
define_keymap(re.compile("^jetbrains-(?!.*toolbox).*$", re.IGNORECASE),{
    # General
    K("C-Key_0"): K("Alt-Key_0"),                 # Open corresponding tool window
    K("C-Key_1"): K("Alt-Key_1"),                 # Open corresponding tool window
    K("C-Key_2"): K("Alt-Key_2"),                 # Open corresponding tool window
    K("C-Key_3"): K("Alt-Key_3"),                 # Open corresponding tool window
    K("C-Key_4"): K("Alt-Key_4"),                 # Open corresponding tool window
    K("C-Key_5"): K("Alt-Key_5"),                 # Open corresponding tool window
    K("C-Key_6"): K("Alt-Key_6"),                 # Open corresponding tool window
    K("C-Key_7"): K("Alt-Key_7"),                 # Open corresponding tool window
    K("C-Key_8"): K("Alt-Key_8"),                 # Open corresponding tool window
    K("C-Key_9"): K("Alt-Key_9"),                 # Open corresponding tool window
    K("Super-Grave"): K("C-Grave"),             # Quick switch current scheme
    K("C-Comma"): K("C-Alt-s"),                   # Open Settings dialog
    K("C-Semicolon"): K("C-Alt-Shift-s"),         # Open Project Structure dialog
    # Debugging
    K("C-Alt-r"): K("F9"),                        # Resume program
    # Search/Replace
    K("C-g"): K("F3"),                          # Find next
    K("C-Shift-F3"): K("Shift-F3"),             # Find previous
    K("Super-g"): K("Alt-j"),                     # Select next occurrence
    K("C-Super-g"): K("C-Alt-Shift-j"),           # Select all occurrences
    K("Super-Shift-g"): K("Alt-Shift-j"),         # Unselect occurrence
    # Editing
    K("Super-Space"): K("LC-Space"),            # Basic code completion
    K("Super-Shift-Space"): K("LC-Shift-Space"),# Smart code completion
    K("Super-j"): K("C-q"),                     # Quick documentation lookup
    K("C-n"): K("Alt-Insert"),                    # Generate code...
    K("Super-o"): K("C-o"),                     # Override methods
    K("Super-i"): K("C-i"),                     # Implement methods
    K("Alt-Up"): K("C-w"),                        # Extend selection
    K("Alt-Down"): K("C-Shift-w"),                # Shrink selection
    K("Super-Shift-q"): K("Alt-q"),               # Context info
    K("Super-Alt-o"): K("C-Alt-o"),                 # Optimize imports
    K("Super-Alt-i"): K("C-Alt-i"),                 # Auto-indent line(s)
    K("C-Backspace"): K("C-y"),                 # Delete line at caret
    K("Super-Shift-j"): K("C-Shift-j"),         # Smart line join
    K("Alt-Delete"): K("C-Delete"),               # Delete to word end
    K("Alt-Backspace"): K("C-Backspace"),         # Delete to word start
    K("C-Shift-Equal"): K("C-KPPLUS"),          # Expand code block
    K("C-Minus"): K("C-KPMINUS"),               # Collapse code block
    K("C-Shift-Equal"): K("C-Shift-KPPLUS"),    # Expand all
    K("C-Shift-Minus"): K("C-Shift-KPMINUS"),   # Collapse all
    K("C-w"): K("C-F4"),                        # Close active editor tab
    # Refactoring
    K("C-Delete"): K("Alt-Delete"),               # Safe Delete
    K("C-T"): K("C-Alt-Shift-t"),                 # Refactor this
    # Navigation
    K("C-o"): K("C-n"),                         # Go to class
    K("C-Shift-o"): K("C-Shift-n"),             # Go to file
    K("C-Alt-o"): K("C-Alt-Shift-n"),               # Go to symbol
    K("Super-Right"): K("Alt-Right"),             # Go to next editor tab
    K("Super-Left"): K("Alt-Left"),               # Go to previous editor tab
    K("C-l"): K("C-g"),                         # Go to line
    K("Alt-Space"): K("C-Shift-i"),               # Open quick definition lookup
    K("C-Y"): K("C-Shift-i"),                   # Open quick definition lookup
    K("Super-Shift-b"): K("C-Shift-b"),         # Go to type declaration
    K("Super-Up"): K("Alt-Up"),                   # Go to previous
    K("Super-Down"): K("Alt-Down"),               # Go to next method
    K("Super-h"): K("C-h"),                     # Type hierarchy
    K("Super-Alt-h"): K("C-Alt-h"),                 # Call hierarchy
    K("C-Down"): K("C-Enter"),                  # Edit source/View source
    K("Alt-Home"): K("Alt-Home"),                   # Show navigation bar
    K("F2"): K("F11"),                          # Toggle bookmark
    K("Super-F3"): K("C-F11"),                  # Toggle bookmark with mnemonic
    K("Super-Key_0"): K("C-Key_0"),             # Go to numbered bookmark
    K("Super-Key_1"): K("C-Key_1"),             # Go to numbered bookmark
    K("Super-Key_2"): K("C-Key_2"),             # Go to numbered bookmark
    K("Super-Key_3"): K("C-Key_3"),             # Go to numbered bookmark
    K("Super-Key_4"): K("C-Key_4"),             # Go to numbered bookmark
    K("Super-Key_5"): K("C-Key_5"),             # Go to numbered bookmark
    K("Super-Key_6"): K("C-Key_6"),             # Go to numbered bookmark
    K("Super-Key_7"): K("C-Key_7"),             # Go to numbered bookmark
    K("Super-Key_8"): K("C-Key_8"),             # Go to numbered bookmark
    K("Super-Key_9"): K("C-Key_9"),             # Go to numbered bookmark
    K("C-F3"): K("Shift-F11"),                  # Show bookmarks
    # Compile and Run
    K("Super-Alt-r"): K("Alt-Shift-F10"),           # Select configuration and run
    K("Super-Alt-d"): K("Alt-Shift-F9"),            # Select configuration and debug
    K("Super-r"): K("Shift-F10"),               # Run
    K("Super-d"): K("Shift-F9"),                # Debug
    K("Super-Shift-r"): K("C-Shift-F10"),       # Run context configuration from editor
    K("Super-Shift-d"): K("C-Shift-F9"),        # Debug context configuration from editor
    # VCS/Local History
    K("Super-v"): K("Alt-Grave"),                 # VCS quick popup
    K("Super-c"): K("LC-c"),                    # Sigints - interrupt
},"Jetbrains")

define_keymap(re.compile(termStr, re.IGNORECASE),{
    K("LC-RC-f"): K("Alt-F10"),                       # Toggle window maximized state
    # Ctrl Tab - In App Tab Switching
    K("LC-Tab") : K("LC-PAGE_DOWN"),
    K("LC-Shift-Tab") : K("LC-PAGE_UP"),
    K("LC-Grave") : K("LC-PAGE_UP"),
    # Converts Cmd to use Ctrl-Shift
    K("RC-MINUS"): K("C-MINUS"),
    K("RC-EQUAL"): K("C-Shift-EQUAL"),
    K("RC-BACKSPACE"): K("C-Shift-BACKSPACE"),
    K("RC-W"): K("C-Shift-W"),
    K("RC-E"): K("C-Shift-E"),
    K("RC-R"): K("C-Shift-R"),
    K("RC-T"): K("C-Shift-t"),
    K("RC-Y"): K("C-Shift-Y"),
    K("RC-U"): K("C-Shift-U"),
    K("RC-I"): K("C-Shift-I"),
    K("RC-O"): K("C-Shift-O"),
    K("RC-P"): K("C-Shift-P"),
    K("RC-LEFT_BRACE"): K("C-Shift-LEFT_BRACE"),
    K("RC-RIGHT_BRACE"): K("C-Shift-RIGHT_BRACE"),
    K("RC-Shift-Left_Brace"):   K("C-Page_Up"),     # Go to prior tab (Left)
    K("RC-Shift-Right_Brace"):  K("C-Page_Down"),   # Go to next tab (Right)
    K("RC-A"): K("C-Shift-A"),
    K("RC-S"): K("C-Shift-S"),
    K("RC-D"): K("C-Shift-D"),
    K("RC-F"): K("C-Shift-F"),
    K("RC-G"): K("C-Shift-G"),
    K("RC-H"): K("C-Shift-H"),
    K("RC-J"): K("C-Shift-J"),
    K("RC-K"): K("C-Shift-K"),
    K("RC-L"): K("C-Shift-L"),
    K("RC-SEMICOLON"): K("C-Shift-SEMICOLON"),
    K("RC-APOSTROPHE"): K("C-Shift-APOSTROPHE"),
    K("RC-GRAVE"): K("C-Shift-GRAVE"),
    K("RC-Z"): K("C-Shift-Z"),
    K("RC-X"): K("C-Shift-X"),
    K("RC-C"): K("C-Shift-C"),
    K("RC-V"): K("C-Shift-V"),
    K("RC-B"): K("C-Shift-B"),
    K("RC-N"): K("C-Shift-N"),
    K("RC-M"): K("C-Shift-M"),
    K("RC-COMMA"): K("C-Shift-COMMA"),
    K("RC-Dot"): K("LC-c"),
    K("RC-SLASH"): K("C-Shift-SLASH"),
    K("RC-KPASTERISK"): K("C-Shift-KPASTERISK"),

    K("LC-Alt-Left"): K("C-Super-Left"),
    K("LC-Alt-Right"): K("C-Super-Right"),
}, "terminals")

# Special overrides for terminals for shortcuts that conflict with General GUI block below.
define_keymap(re.compile(termStr, re.IGNORECASE),{
    K("Alt-Backspace"):           K("Alt-Shift-Backspace"), # Wordwise delete word left of cursor in terminals
    K("Alt-Delete"):              [K("Esc"),K("d")],      # Wordwise delete word right of cursor in terminals
    K("RC-Backspace"):          K("C-u"),               # Wordwise delete line left of cursor in terminals
    K("RC-Delete"):             K("C-k"),               # Wordwise delete line right of cursor in terminals
    ### Tab navigation
    K("RC-Shift-Left"):         K("C-Page_Up"),         # Tab nav: Go to prior tab (Left)
    K("RC-Shift-Right"):        K("C-Page_Down"),       # Tab nav: Go to next tab (Right)
},"Special overrides for terminals")
